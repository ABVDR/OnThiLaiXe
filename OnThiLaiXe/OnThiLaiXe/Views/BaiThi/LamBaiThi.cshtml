 @model BaiThi
@{
    var chiTietList = Model.ChiTietBaiThis.ToList();
    int stt = 1;
}
<div class="body">
    <div class="container">
        <div class="header">
            <a class="back-link" href="javascript:history.back()">
                <i class="fas fa-arrow-left"></i>
            </a>


            <h1 class="header-text">
                Bài Thi: @Model.Id
            </h1>
            <input type="hidden" id="baiThiId" value="@Model.Id" />
        </div>
        <div class="empty-space"></div>
    </div>

    <div class="main-content">
        <div class="question-container">
            @for (int i = 0; i < chiTietList.Count; i++)
            {
                var chiTiet = chiTietList[i];
                <div class="question-slide" id="question-@i" style="display: @(i == 0 ? "block" : "none")">
                    <p class="question-text">
                        <strong>Câu @(i + 1):</strong> @chiTiet.CauHoi.NoiDung
                    </p>

                    @if (!string.IsNullOrEmpty(chiTiet.CauHoi.MediaUrl))
                    {
                        <div class="question-media mb-3">
                            <img src="@chiTiet.CauHoi.MediaUrl" alt="Hình minh họa" class="img-fluid" style="max-width: 100%; height: auto;" />
                        </div>
                    }

                    <form class="question-options">
                        <label class="option-item" for="q@chiTiet.CauHoi.Id_a_@i">
                            <input id="q@chiTiet.CauHoi.Id_a_@i" name="answer_@chiTiet.CauHoi.Id" type="radio" value="A" />
                            <span>A. @chiTiet.CauHoi.LuaChonA</span>
                        </label>

                        <label class="option-item" for="q@chiTiet.CauHoi.Id_b_@i">
                            <input id="q@chiTiet.CauHoi.Id_b_@i" name="answer_@chiTiet.CauHoi.Id" type="radio" value="B" />
                            <span>B. @chiTiet.CauHoi.LuaChonB</span>
                        </label>

                        @if (!string.IsNullOrEmpty(chiTiet.CauHoi.LuaChonC))
                        {
                            <label class="option-item" for="q@chiTiet.CauHoi.Id_c_@i">
                                <input id="q@chiTiet.CauHoi.Id_c_@i" name="answer_@chiTiet.CauHoi.Id" type="radio" value="C" />
                                <span>C. @chiTiet.CauHoi.LuaChonC</span>
                            </label>
                        }

                        @if (!string.IsNullOrEmpty(chiTiet.CauHoi.LuaChonD))
                        {
                            <label class="option-item" for="q@chiTiet.CauHoi.Id_d_@i">
                                <input id="q@chiTiet.CauHoi.Id_d_@i" name="answer_@chiTiet.CauHoi.Id" type="radio" value="D" />
                                <span>D. @chiTiet.CauHoi.LuaChonD</span>
                            </label>
                        }
                    </form>

                    <div class="navigation-buttons">
                        <button onclick="previousQuestion()" type="button" class="previous-button">
                            <i class="fas fa-step-backward"></i> Câu Trước
                        </button>
                        <button onclick="nextQuestion()" type="button" class="next-button">
                            Câu Tiếp <i class="fas fa-step-forward"></i>
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="side-panel">
            <p id="timerDisplay" class="timer-display">20 : 00</p>
            <div class="scoreDisplay" id="scoreDisplay" style="display: none;">
                <p><strong>Điểm:</strong> <span id="tongDiem"></span></p>
                <p><strong>Số câu đúng:</strong> <span id="soCauDung"></span></p>
                <p><strong>Kết quả:</strong> <span id="ketQua"></span></p>
                <p><strong>Số câu điểm liệt sai:</strong> <span id="soCauLoiNghiemTrong"></span></p>
            </div>

            <div class="question-buttons">
                @for (int i = 0; i < chiTietList.Count; i++)
                {
                    <button class="question-button" type="button" onclick="showQuestion(@i)" data-question-id="@i">
                        @(@i + 1)
                    </button>
                }
            </div>
            <button onclick="submitExam()" type="button" class="submit-button">
                Nộp Bài
            </button>
        </div>
    </div>

    <div id="resultContainer" class="result-container"></div>
</div>


<style>
    body {
        font-family: "Inter", sans-serif;
    }

    body {
        background-color: white;
    }



    .container {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
    }

    .header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 24px;
    }

    .question-media img {
        border: 1px solid #ccc;
        padding: 5px;
        margin-top: 10px;
        border-radius: 6px;
        width: 300px;
    }

    .question-media {
        display: flex;
        align-content: center;
        justify-content: center;
        text-align: center;
    }


    .back-link {
        color: #00875A;
        text-decoration: none;
    }

        .back-link:hover {
            color: #00663f;
        }

    .header-text {
        font-weight: 600;
        font-size: 15px;
        line-height: 18px;
    }

    .empty-space {
        flex: 1;
    }

    .main-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px 16px;
        display: flex;
        gap: 32px;
    }

    .question-container {
        background-color: #FFFCF6;
        padding: 24px;
        width: 1200px;
        border-radius: 4px;
    }

    .question-text {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 16px;
    }

    .question-options {
        font-size: 14px;
        line-height: 20px;
        color: #1A1A1A;
        space-y-4: 16px;
    }

    .option-item {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        cursor: pointer;
        user-select: none;
    }

        .option-item input {
            margin-top: 6px;
            width: 16px;
            height: 16px;
            border: 1px solid #999;
        }

    .navigation-buttons {
        margin-top: 32px;
        display: flex;
        gap: 16px;
    }

    .previous-button {
        display: flex;
        align-items: center;
        gap: 8px;
        border: 1px solid #00875A;
        border-radius: 4px;
        padding: 8px 20px;
        color: #00875A;
        font-weight: 600;
        font-size: 14px;
    }

        .previous-button:hover {
            background-color: #E6F4EA;
        }

    .next-button {
        display: flex;
        align-items: center;
        gap: 8px;
        background-color: #00875A;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 12px 24px;
        color: white;
        font-weight: 600;
        font-size: 14px;
    }

        .next-button:hover {
            background-color: #00663f;
        }

    .side-panel {
        background-color: #F7F9FB;
        padding: 24px;
        border-radius: 4px;
        width: 40%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 24px;
    }

    .timer-display {
        font-size: 25px;
        font-weight: 800;
        color: #E03E2F;
        padding-top: 20px;
    }

    .scoreDisplay {
        font-size: 25px;
        font-weight: 400;
        color: #00875A;
    }

    .question-buttons {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 8px;
        width: 100%;
        max-width: 280px;
    }

    .question-button {
        border: 1px solid #1A1A1A;
        border-radius: 4px;
        padding: 8px 12px;
        font-size: 14px;
        font-weight: 600;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 4px;
        cursor: pointer;
    }

    .submit-button {
        background-color: #00875A;
        border-radius: 8px;
        padding: 12px 32px;
        color: white;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
    }

        .submit-button:hover {
            background-color: #00663f;
        }

    .result-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 24px;
    }

    button.bg-red-100 {
        background-color: #FEE2E2; /* Màu đỏ nhạt */
        color: #DC2626; /* Màu chữ đỏ */
        border-color: #DC2626;
    }

    button.font-bold {
        font-weight: bold;
    }


    .btn-answered {
        background-color: #D1FAE5; /* xanh lá nhạt */
        border-color: #10B981;
        color: #065F46;
    }

    .btn-correct {
        background-color: #BBF7D0; /* xanh lá đậm hơn */
        border-color: #059669;
        color: #065F46;
        font-weight: bold;
    }

    .btn-wrong {
        background-color: #FEE2E2; /* đỏ nhạt */
        border-color: #DC2626;
        color: #991B1B;
        font-weight: bold;
    }

    .current-question {
        background-color: #fbbf24 !important; /* Cam nhạt */
        border-color: #f59e0b !important;
        color: black !important;
        font-weight: bold;
    }

    .bg-green-100 {
        background-color: #D1FAE5; /* Màu xanh lá nhạt */
        color: #065F46;
    }

    .bg-red-100 {
        background-color: #FEE2E2; /* Màu đỏ nhạt */
        color: #991B1B;
    }

    .font-bold {
        font-weight: bold;
    }

</style>

<script>
    const timeLimit = @(Model.ChiTietBaiThis?.FirstOrDefault()?.CauHoi?.LoaiBangLai?.ThoiGianThi ?? 0) * 60;

    const navType = performance.getEntriesByType("navigation")[0]?.type || performance.navigation.type;
    const isReload = navType === "reload";

    let savedTime = isReload ? sessionStorage.getItem('savedTimeRemaining') : null;
    let timeRemaining = savedTime ? parseInt(savedTime) : timeLimit;
    let timer;
    let currentQuestionIndex = 0;
    const totalQuestions = document.querySelectorAll('.question-slide').length;

    function showQuestion(index) {
        currentQuestionIndex = index;
        document.querySelectorAll('.question-slide').forEach((slide, i) => {
            slide.style.display = i === index ? 'block' : 'none';
        });

        const currentDisplay = document.getElementById('currentQuestionDisplay');
        if (currentDisplay) {
            currentDisplay.textContent = `Câu ${index + 1} / ${totalQuestions}`;
        }

        document.querySelectorAll('button[data-question-id]').forEach(btn => {
            btn.classList.remove('current-question');
        });

        const currentBtn = document.querySelector(`button[data-question-id="${index}"]`);
        if (currentBtn) {
            currentBtn.classList.add('current-question');
        }
    }

    function startTimer() {
        timer = setInterval(() => {
            if (timeRemaining > 0) {
                timeRemaining--;
                updateTimerDisplay();
                // Lưu thời gian mỗi giây
                sessionStorage.setItem('savedTimeRemaining', timeRemaining.toString());
                // Lưu đáp án mỗi giây
                autoSaveAnswers();
            } else {
                clearInterval(timer);
                sessionStorage.removeItem('savedTimeRemaining');
                alert("Hết thời gian!");
                submitExam();
            }
        }, 1000);
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(timeRemaining / 60);
        const seconds = timeRemaining % 60;
        document.getElementById('timerDisplay').textContent =
            `${String(minutes).padStart(2, '0')} : ${String(seconds).padStart(2, '0')}`;
    }

    function nextQuestion() {
        if (currentQuestionIndex < totalQuestions - 1) {
            currentQuestionIndex++;
            showQuestion(currentQuestionIndex);
        }
    }

    function previousQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            showQuestion(currentQuestionIndex);
        }
    }

    function getAnswersFromInputs() {
        const answers = {};
        document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
            const questionId = input.name.split('_')[1];
            answers[questionId] = input.value;
        });
        return answers;
    }

    function autoSaveAnswers() {
        const answers = getAnswersFromInputs();
        sessionStorage.setItem('autoSaveAnswers', JSON.stringify(answers));
    }

    function restoreAnswers() {
        if (!isReload) {
            sessionStorage.removeItem('autoSaveAnswers');
            sessionStorage.removeItem('savedTimeRemaining');
            return;
        }

        const saved = sessionStorage.getItem('autoSaveAnswers');
        if (!saved) return;

        try {
            const answers = JSON.parse(saved);
            for (const [qid, val] of Object.entries(answers)) {
                const input = document.querySelector(`input[name="answer_${qid}"][value="${val}"]`);
                if (input) {
                    input.checked = true;

                    const slide = input.closest('.question-slide');
                    if (slide) {
                        const questionIndex = parseInt(slide.id.split('-')[1]);
                        const button = document.querySelector(`button[data-question-id="${questionIndex}"]`);
                        if (button) {
                            button.classList.add("btn-answered");
                        }
                    }
                }
            }
        } catch (e) {
            console.error("Lỗi khi khôi phục đáp án:", e);
        }
    }

    function submitExam() {
        const baiThiId = document.getElementById('baiThiId').value;
        if (!baiThiId) {
            alert("ID bài thi không hợp lệ!");
            return;
        }

        clearInterval(timer);
        sessionStorage.removeItem('autoSaveAnswers');
        sessionStorage.removeItem('savedTimeRemaining');

        const answers = getAnswersFromInputs();

        fetch('/BaiThi/NopBaiThiAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ baiThiId, answers })
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    displayResult(data);
                } else {
                    alert(data.message || "Có lỗi xảy ra.");
                }
            })
            .catch(err => {
                console.error("Lỗi:", err);
                alert("Không thể nộp bài.");
            });
    }

    function displayResult(data) {
        const scoreDisplay = document.getElementById("scoreDisplay");
        scoreDisplay.style.display = "block";
        document.getElementById("tongDiem").innerText = data.tongDiem.toFixed(2);
        document.getElementById("soCauDung").innerText = `${data.soCauDung} / ${data.tongSoCau}`;

        const ketQuaElement = document.getElementById("ketQua");
        ketQuaElement.innerText = data.ketQua;
        ketQuaElement.style.color = data.ketQua === "Đậu" ? "green" : "red";

        const diemLietElement = document.getElementById("soCauLoiNghiemTrong");
        diemLietElement.innerText = data.soCauLoiNghiemTrong;
        diemLietElement.style.color = data.soCauLoiNghiemTrong > 0 ? "red" : "green";

        data.ketQuaList.forEach((kq, index) => {
            const slide = document.getElementById(`question-${index}`);
            if (slide) {
                const options = slide.querySelectorAll("label.option-item");
                options.forEach(label => {
                    const input = label.querySelector("input");
                    label.classList.remove("bg-green-100", "bg-red-100", "font-bold");

                    if (input.value === kq.dapAnDung) label.classList.add("bg-green-100", "font-bold");
                    if (input.checked && input.value !== kq.dapAnDung) label.classList.add("bg-red-100", "font-bold");
                });
            }

            const questionButton = document.querySelector(`button[data-question-id="${index}"]`);
            if (questionButton) {
                questionButton.classList.remove("btn-answered", "btn-correct", "btn-wrong", "current-question");
                questionButton.classList.add(kq.dungSai ? "btn-wrong" : "btn-correct");
            }

            if (!kq.cauTraLoi) {
                const slide = document.getElementById(`question-${index}`);
                if (slide) {
                    const options = slide.querySelectorAll("label.option-item");
                    options.forEach(label => {
                        const input = label.querySelector("input");
                        label.classList.remove("bg-green-100", "bg-red-100", "font-bold");
                        if (input.value === kq.dapAnDung) label.classList.add("bg-green-100", "font-bold");
                    });
                }

                const questionButton = document.querySelector(`button[data-question-id="${index}"]`);
                if (questionButton) {
                    questionButton.classList.remove("btn-answered", "btn-correct", "btn-wrong", "current-question");
                    questionButton.classList.add("btn-wrong");
                }
            }
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        restoreAnswers();
        showQuestion(currentQuestionIndex);
        updateTimerDisplay();
        startTimer();

        document.querySelectorAll('input[type="radio"]').forEach(input => {
            input.addEventListener('change', () => {
                const questionIndex = parseInt(input.closest('.question-slide').id.split('-')[1]);
                const button = document.querySelector(`button[data-question-id="${questionIndex}"]`);
                if (button) {
                    button.classList.add("btn-answered");
                }
            });
        });
        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowRight') {
                nextQuestion();
            } else if (e.key === 'ArrowLeft') {
                previousQuestion();
            }
        });
    });
</script>
